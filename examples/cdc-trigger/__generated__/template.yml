AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  IsProd:
    Fn::Equals:
      - Ref: StageName
      - production
Globals:
  Function:
    Environment:
      Variables:
        TABLE_USER_SESSION:
          Ref: TableUserSession
    Handler: index.handler
    MemorySize: 256
    Runtime: nodejs18.x
    Timeout: 30
    Tracing: Active
Outputs:
  TableUserSession:
    Description: The name of the DynamoDB table for TableUserSession
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableUserSession
    Value:
      Ref: TableUserSession
Parameters:
  LogRetentionInDays:
    Default: 3
    Description: Log retention in days
    Type: Number
  StageName:
    AllowedValues:
      - development
      - production
      - test
    Default: development
    Description: The name of the stage
    Type: String
Resources:
  FnTriggerUSUpsert7d1674e2:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2020
    Properties:
      CodeUri: trigger--user-session--upsert
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2Queue
                - Arn
          Type: SQS
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2DLQ
                - QueueName
      Timeout: 90
    Type: AWS::Serverless::Function
  FnTriggerUSUpsert7d1674e2DLQ:
    Properties:
      KmsMasterKeyId:
        Fn::If:
          - IsProd
          - Ref: FnTriggerUSUpsert7d1674e2QueueKey
          - AWS::NoValue
    Type: AWS::SQS::Queue
  FnTriggerUSUpsert7d1674e2LogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FnTriggerUSUpsert7d1674e2}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  FnTriggerUSUpsert7d1674e2Queue:
    Properties:
      Fn::If:
        - IsProd
        - KmsMasterKeyId:
            Ref: FnTriggerUSUpsert7d1674e2QueueKey
          RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2DLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
        - RedrivePolicy:
            deadLetterTargetArn:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2DLQ
                - Arn
            maxReceiveCount: 3
          VisibilityTimeout: 320
    Type: AWS::SQS::Queue
  FnTriggerUSUpsert7d1674e2QueueKey:
    Condition: IsProd
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource: '*'
            Sid: Allow EventBridge to use the Key
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow administration of the key
          - Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:CreateGrant
              - kms:DescribeKey
            Condition:
              StringEquals:
                kms:CallerAccount:
                  Fn::Sub: ${AWS::AccountId}
                kms:ViaService: sqs.us-east-1.amazonaws.com
            Effect: Allow
            Principal:
              AWS: '*'
            Resource: '*'
            Sid: >-
              Allow access through Simple Queue Service (SQS) for all principals
              in the account that are authorized to use SQS
          - Action:
              - kms:Describe*
              - kms:Get*
              - kms:List*
              - kms:RevokeGrant
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Allow direct access to key metadata to the account
        Version: '2012-10-17'
      PendingWindowInDays: 7
    Type: AWS::KMS::Key
  FnTriggerUSUpsert7d1674e2QueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - FnTriggerUSUpsert7d1674e2Rule
                    - Arn
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2Queue
                - Arn
            Sid: Allow EventBridge to send messages to the queue
      Queues:
        - Ref: FnTriggerUSUpsert7d1674e2Queue
    Type: AWS::SQS::QueuePolicy
  FnTriggerUSUpsert7d1674e2Rule:
    Properties:
      EventBusName: default
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - UserSession
        detail-type:
          - INSERT
          - MODIFY
        resources:
          - Fn::GetAtt:
              - TableUserSession
              - Arn
        source:
          - TableUserSession.UserSession
      Targets:
        - Arn:
            Fn::GetAtt:
              - FnTriggerUSUpsert7d1674e2Queue
              - Arn
          Id: FnTriggerUSUpsert7d1674e2
    Type: AWS::Events::Rule
  TableUserSession:
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: StageName
          Value:
            Ref: StageName
        - Key: TableName
          Value: TableUserSession
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
    Type: AWS::DynamoDB::Table
  TableUserSessionCDCDispatcher:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2020
    Properties:
      CodeUri: dispatcher-table-user-session
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            MaximumRetryAttempts: 3
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
                - TableUserSession
                - StreamArn
          Type: DynamoDB
      MemorySize: 384
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Timeout: 60
    Type: AWS::Serverless::Function
  TableUserSessionCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TableUserSessionCDCDispatcher}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
Transform: AWS::Serverless-2016-10-31
