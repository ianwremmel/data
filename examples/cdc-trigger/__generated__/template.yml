AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  CreateChangeDataCaptureAlarmsCondition:
    Fn::Equals:
      - Ref: CreateChangeDataCaptureAlarms
      - 'true'
  IsProd:
    Fn::Equals:
      - Ref: StageName
      - production
Globals:
  Function:
    Environment:
      Variables:
        TABLE_USER_SESSION:
          Ref: TableUserSession
    Handler: index.handler
    MemorySize: 256
    Runtime: nodejs18.x
    Timeout: 30
    Tracing: Active
Outputs:
  TableUserSession:
    Description: The name of the DynamoDB table for TableUserSession
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-TableUserSession
    Value:
      Ref: TableUserSession
Parameters:
  CreateChangeDataCaptureAlarms:
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
    Description: Controls whether or not CloudWatch alarms are deployed
    Type: String
  LogRetentionInDays:
    Default: 3
    Description: Log retention in days
    Type: Number
  StageName:
    AllowedValues:
      - development
      - production
      - test
    Default: development
    Description: The name of the stage
    Type: String
Resources:
  FnTriggerUSUpsert7d1674e2:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2020
    Properties:
      CodeUri: trigger--user-session--upsert
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            Queue:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2Queue
                - Arn
          Type: SQS
      MemorySize: 256
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - SQSSendMessagePolicy:
            QueueName:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2DLQ
                - QueueName
      Timeout: 30
    Type: AWS::Serverless::Function
  FnTriggerUSUpsert7d1674e2ColdstartLatencyAlarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: FnTriggerUSUpsert7d1674e2 Coldstart Latency > 500ms
      AlarmName: FnTriggerUSUpsert7d1674e2 Coldstart Latency
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: function_name
          Value:
            Ref: FnTriggerUSUpsert7d1674e2
      EvaluationPeriods: 5
      MetricName: init_duration
      Namespace: LambdaInsights
      OKActions: []
      Period: 60
      Statistic: Maximum
      Threshold: 500
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
  FnTriggerUSUpsert7d1674e2DLQ:
    Properties:
      KmsMasterKeyId: alias/aws/sqs
    Type: AWS::SQS::Queue
  FnTriggerUSUpsert7d1674e2DLQDLQAlarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: FnTriggerUSUpsert7d1674e2DLQ DLQ has messages
      AlarmName: FnTriggerUSUpsert7d1674e2DLQ DLQ
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: QueueName
          Value:
            Fn::GetAtt:
              - FnTriggerUSUpsert7d1674e2DLQ
              - QueueName
      EvaluationPeriods: 1
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      OKActions: []
      Period: 60
      Statistic: Sum
      Threshold: 0
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
  FnTriggerUSUpsert7d1674e2LambdaP99Alarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: FnTriggerUSUpsert7d1674e2 P99 Latency > 1000ms
      AlarmName: FnTriggerUSUpsert7d1674e2 Lambda Latency (P99)
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: FnTriggerUSUpsert7d1674e2
      EvaluationPeriods: 5
      ExtendedStatistic: p99
      MetricName: Duration
      Namespace: AWS/Lambda
      OKActions: []
      Period: 60
      Threshold: 1000
      TreatMissingData: notBreaching
      Unit: Milliseconds
    Type: AWS::CloudWatch::Alarm
  FnTriggerUSUpsert7d1674e2LogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${FnTriggerUSUpsert7d1674e2}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  FnTriggerUSUpsert7d1674e2MemoryUsageAlarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: FnTriggerUSUpsert7d1674e2 Memory Usage > 80%
      AlarmName: FnTriggerUSUpsert7d1674e2 Memory Usage
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: function_name
          Value:
            Ref: FnTriggerUSUpsert7d1674e2
      EvaluationPeriods: 5
      MetricName: memory_utilization
      Namespace: LambdaInsights
      OKActions: []
      Period: 60
      Statistic: Maximum
      Threshold: 80
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
  FnTriggerUSUpsert7d1674e2Queue:
    Properties:
      KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - FnTriggerUSUpsert7d1674e2DLQ
            - Arn
        maxReceiveCount: 3
      VisibilityTimeout: 320
    Type: AWS::SQS::Queue
  FnTriggerUSUpsert7d1674e2QueuePolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Fn::GetAtt:
                    - FnTriggerUSUpsert7d1674e2Rule
                    - Arn
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              Fn::GetAtt:
                - FnTriggerUSUpsert7d1674e2Queue
                - Arn
            Sid: Allow EventBridge to send messages to the queue
      Queues:
        - Ref: FnTriggerUSUpsert7d1674e2Queue
    Type: AWS::SQS::QueuePolicy
  FnTriggerUSUpsert7d1674e2Rule:
    Properties:
      EventBusName: default
      EventPattern:
        detail:
          dynamodb:
            NewImage:
              _et:
                S:
                  - UserSession
        detail-type:
          - INSERT
          - MODIFY
        resources:
          - Fn::GetAtt:
              - TableUserSession
              - Arn
        source:
          - TableUserSession.UserSession
      Targets:
        - Arn:
            Fn::GetAtt:
              - FnTriggerUSUpsert7d1674e2Queue
              - Arn
          Id: FnTriggerUSUpsert7d1674e2
    Type: AWS::Events::Rule
  TableUserSession:
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      SSESpecification:
        SSEEnabled:
          Fn::If:
            - IsProd
            - true
            - false
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Tags:
        - Key: StageName
          Value:
            Ref: StageName
        - Key: TableName
          Value: TableUserSession
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
    Type: AWS::DynamoDB::Table
  TableUserSessionCDCDispatcher:
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        EntryPoints:
          - ./index
        External:
          - '@aws-sdk/*'
        Minify: false
        Sourcemap: true
        Target: es2020
    Properties:
      CodeUri: dispatcher-table-user-session
      Events:
        Stream:
          Properties:
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
            MaximumRetryAttempts: 3
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::GetAtt:
                - TableUserSession
                - StreamArn
          Type: DynamoDB
      MemorySize: 384
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambda_ReadOnlyAccess
        - AWSXrayWriteOnlyAccess
        - CloudWatchLambdaInsightsExecutionRolePolicy
        - CloudWatchPutMetricPolicy: {}
        - EventBridgePutEventsPolicy:
            EventBusName: default
      Timeout: 60
    Type: AWS::Serverless::Function
  TableUserSessionCDCDispatcherColdstartLatencyAlarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: TableUserSessionCDCDispatcher Coldstart Latency > 500ms
      AlarmName: TableUserSessionCDCDispatcher Coldstart Latency
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: function_name
          Value:
            Ref: TableUserSessionCDCDispatcher
      EvaluationPeriods: 5
      MetricName: init_duration
      Namespace: LambdaInsights
      OKActions: []
      Period: 60
      Statistic: Maximum
      Threshold: 500
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
  TableUserSessionCDCDispatcherLambdaP99Alarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: TableUserSessionCDCDispatcher P99 Latency > 1000ms
      AlarmName: TableUserSessionCDCDispatcher Lambda Latency (P99)
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: TableUserSessionCDCDispatcher
      EvaluationPeriods: 5
      ExtendedStatistic: p99
      MetricName: Duration
      Namespace: AWS/Lambda
      OKActions: []
      Period: 60
      Threshold: 1000
      TreatMissingData: notBreaching
      Unit: Milliseconds
    Type: AWS::CloudWatch::Alarm
  TableUserSessionCDCDispatcherLogGroup:
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${TableUserSessionCDCDispatcher}
      RetentionInDays:
        Ref: LogRetentionInDays
    Type: AWS::Logs::LogGroup
  TableUserSessionCDCDispatcherMaxIteratorAgeAlarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: TableUserSessionCDCDispatcher Max Iterator Age > 30ms
      AlarmName: TableUserSessionCDCDispatcher Max Iterator Age
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: TableUserSessionCDCDispatcher
      EvaluationPeriods: 5
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      OKActions: []
      Period: 60
      Statistic: Average
      Threshold: 30
      TreatMissingData: notBreaching
      Unit: Seconds
    Type: AWS::CloudWatch::Alarm
  TableUserSessionCDCDispatcherMemoryUsageAlarm:
    Condition: CreateChangeDataCaptureAlarmsCondition
    Properties:
      ActionsEnabled: true
      AlarmActions: []
      AlarmDescription: TableUserSessionCDCDispatcher Memory Usage > 80%
      AlarmName: TableUserSessionCDCDispatcher Memory Usage
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 3
      Dimensions:
        - Name: function_name
          Value:
            Ref: TableUserSessionCDCDispatcher
      EvaluationPeriods: 5
      MetricName: memory_utilization
      Namespace: LambdaInsights
      OKActions: []
      Period: 60
      Statistic: Maximum
      Threshold: 80
      TreatMissingData: notBreaching
    Type: AWS::CloudWatch::Alarm
Transform: AWS::Serverless-2016-10-31
