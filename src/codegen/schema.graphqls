"""
JavaScript Date stored as a Number in DynamoDB
"""
scalar Date

"""
Arbitrary JSON stored as a Map in DynamoDB
"""
scalar JSONObject

"""
Indicates all reads for this type will be done using DynamoDB's
strong-consistency mode. General discouraged, though certain user-facing flows
might require it.
"""
directive @consistent on OBJECT

"""
Indicates the Model in question must use a partition key without a sort key as
its primary key.
"""
directive @partitionKey(pkFields: [String!]!, pkPrefix: String) on OBJECT

"""
CDC Event Types
"""
enum CdcEvent {
  INSERT
  MODIFY
  REMOVE
  UPSERT
}

"""
Wires a up a change data capture stream to a DynamoDB table.
"""
directive @cdc(
  """
  The type of change events to subscribe to.
  """
  event: CdcEvent!
  """
  Path to the requireable package that handles a specific event. Relative paths
  are, unfortunately, relative to the _generated_ file, not the GraphQL schema
  file.
  """
  handler: String!
  """
  The model type that will be updated by this stream.
  """
  produces: String!
) on OBJECT

"""
Indicates this Model has a composite key generated from the specified fields.
"""
directive @compositeKey(
  pkFields: [String!]!
  pkPrefix: String
  skFields: [String!]!
  skPrefix: String
) on OBJECT

"""
Indicates this Model has a composite Global Secondary Index. May be specified
more than once.
"""
directive @compositeIndex(
  """
  The name of the index. Typically, this is something like "gsi1", "gsi2", etc.
  It cannot be autogenerated because it must remain stable if, say, another
  index is removed. It must be unique across all indexes on this model, but may
  be shared across models using the same table.
  """
  name: String!
  pkFields: [String!]!
  pkPrefix: String
  skFields: [String!]!
  skPrefix: String
) repeatable on OBJECT

"""
Indicates the field will be configured as the DynamoDB ttl field for this type.
Always gets saved to a column named "ttl" to avoid conflicts in single-table
entities that all might use different names
"""
directive @ttl(duration: String!) on FIELD_DEFINITION

"""
Models are DynamoDB tables with a key schema that may or may not include a sort
key. A Model must be decorated with either @partitionKey or @compositeKey.

Note that, while Model does not explicitly implement Node, its `id` field
behaves like `Node#id` typically does. This is to avoid defining Node in the
injected schema if the consumer's schema also defined Node or defines it
differently.
"""
interface Model implements Timestamped & Versioned {
  createdAt: Date!
  id: ID!
  updatedAt: Date!
  version: Int!
}

"""
Automatically adds a createdAt and updatedAt timestamp to the entity and sets
them appropriately. The createdAt timestamp is only set on create, while the
updatedAt timestamp is set on create and update.
"""
interface Timestamped {
  """
  Set automatically when the item is first written
  """
  createdAt: Date!
  """
  Set automatically when the item is updated
  """
  updatedAt: Date!
}

"""
Automatically adds a column to enable optimistic locking. This field shouldn't
be manipulated directly, but may need to be passed around by the runtime in
order to make updates.
"""
interface Versioned {
  version: Int!
}
